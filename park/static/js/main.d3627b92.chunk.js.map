{"version":3,"sources":["components/PlacesAutocomplete.jsx","components/DistanceMatrixWrapper.jsx","components/ParkingPeriod.jsx","components/ParkingTimeOffset.jsx","components/ParkingListItem.jsx","components/ParkingList.jsx","lib/Availability.jsx","lib/Parking.jsx","lib/CarparkShortlist.jsx","App.js","reportWebVitals.js","index.js"],"names":["PlacesAutocomplete","props","_usePlacesAutocomplet","usePlacesAutocomplete","requestOptions","componentRestrictions","country","debounce","ready","value","_usePlacesAutocomplet2","suggestions","status","data","setValue","clearSuggestions","ref","useOnclickOutside","handleSelect","_ref","description","getGeocode","address","then","results","getLatLng","_ref2","lat","lng","onSelectDestination","destinationAddr","destinationLat","destinationLng","catch","error","console","log","react_default","a","createElement","InputGroup","className","Form","Control","type","placeholder","aria-label","aria-describedby","onChange","e","target","disabled","map","suggestion","place_id","_suggestion$structure","structured_formatting","main_text","secondary_text","key","onClick","DistanceMatrixWrapper","_this","this","inputs","calculateDistance","position","destAdr","offsetOverride","origLat","coords","latitude","origLng","longitude","destLat","destLng","esm","options","destinations","origins","travelMode","callback","res","distance","rows","elements","onChangeDMDistance","duration","offset","Math","ceil","onChangeDMOffset","Component","ParkingPeriod","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onClickPeriod","btnIndex","parkingPeriod","i","buttons","length","onChangeParkingPeriod","_this2","Button","ParkingTimeOffset","renderOffsetOptions","offsets","style","width","onChangeOffset","ParkingListItem","onClickDestination","googleMapUrl","carparkData","window","open","renderParkingFee","estimate","parkingForbidden","parkingFee","toFixed","renderAvailability","availability","undefined","lots_available","carpark","carparkAvailability","fee_structure","variant","borderRadius","name","walkingMinutes","ParkingList","shortlists","components_ParkingListItem","Availability","onDataLoadCallback","fetchAvailabilityData","fetch","method","headers","content-type","response","json","items","carpark_data","refreshDateTime","timestamp","dataLoad","dataError","Parking","parkingRates","parkingBeginDateTime","parkingTimeInMinutes","generateStopDateTime","startDateTime","timeInMinutes","Date","setTime","getTime","isDualParkingRate","parkingRate","split","parseParkingRate","blockTimeInMinutes","parkingRateFees","match","forEach","subParkingRate","logic","amount","parseFloat","coreFee","coreFeeTimeInMinutes","coreFeePerEntry","firstFee","firstFeeTimeInMinutes","firstUsage","secondFee","secondFeeTimeInMinutes","secondFeeLenInMinutes","secondUsage","surchargeFee","seasonParkingOnly","noParking","maximumFee","populateParkingRate","blockSize","beginParkingRate","toStopTimeInMinutes","detailParkingRateMeta","beginDateTime","stopDateTime","detailParkingRateFees","detailParkingRate","objectSpread","detailParkingRates","push","populateParkingRates","getMinutes","rates","nextBlockSize","calculateParkingFee","subtotalFee","prevRateName","extra","periodInBlock","multiplier","period","prevExtra","periodToEnd","parkingForbiddenBeginDateTime","parkingStopDateTime","CarparkShortlist","originLat","originLng","maxDistance","getDistanceFromLatLngInKm","lat1","lng1","lat2","lng2","deg2rad","deg","PI","dLat","dLng","sin","cos","atan2","sqrt","sorterLogic","b","sortShortlistsByDistance","arr","sort","generateGoogleMapUrl","carparkLat","carparkLng","populateShortlistedCarparks","Carparks","walkingSpeed","populateCarparkAvailability","carparkAvailablity","shortlist","carparkNo","car_park_no","availabilityCarparkNo","carpark_number","carpark_info","startParking","now","beginIndex","getDay","getHours","endIndex","carparkRates","concat","toConsumableArray","carpark_rates","slice","getCarparks","App","state","destinationSearchRadius","timeToDestination","componentDidMount","navigator","geolocation","getCurrentPosition","setState","refreshCarparkShortlist","carparkShortlist","destinationData","event","components_PlacesAutocomplete","components_DistanceMatrixWrapper","components_ParkingPeriod","components_ParkingTimeOffset","components_ParkingList","React","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.d3627b92.chunk.js","sourcesContent":["import React from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport useOnclickOutside from \"react-cool-onclickoutside\";\nimport { InputGroup, Form } from \"react-bootstrap\";\n\nconst PlacesAutocomplete = (props) => {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n      componentRestrictions: { country: 'sg', },\n    },\n    debounce: 300,\n  });\n\n  const ref = useOnclickOutside(() => {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  const handleInput = (e) => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({ description }) =>\n    () => {\n      // When user selects a place, we can replace the keyword without request data from API\n      // by setting the second parameter to \"false\"\n      setValue(description, false);\n      clearSuggestions();\n\n      // Get latitude and longitude via utility functions\n      getGeocode({ address: description })\n        .then((results) => getLatLng(results[0]))\n        .then(({ lat, lng }) => {\n          //console.log(\"Coordinates: \", { lat, lng });\n          props.onSelectDestination({ destinationAddr: description, destinationLat: lat, destinationLng: lng });\n        })\n        .catch((error) => {\n          console.log(\"Error: \", error);\n        });\n    };\n\n  const renderSuggestions = () =>\n    data.map((suggestion) => {\n      const {\n        place_id,\n        structured_formatting: { main_text, secondary_text },\n      } = suggestion;\n\n      return (\n        <li className=\"dropdown-item\" key={place_id} onClick={handleSelect(suggestion)}>\n          <strong>{main_text}</strong> <small>{secondary_text}</small>\n        </li>\n      );\n    });\n\n  return (\n    <div ref={ref}>\n      <InputGroup className=\"mb-1\">\n        <Form.Control\n          type=\"search\"\n          className=\"fs-5\"\n          placeholder=\"Destination\"\n          aria-label=\"Destination\"\n          aria-describedby=\"basic-addon2\"\n          onChange={handleInput}\n          disabled={!ready}\n          value={value} />\n      </InputGroup>\n      {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n      {status === \"OK\" && <div className=\"dropdown\"><ul className=\"dropdown-menu d-block fs-5\">{renderSuggestions()}</ul></div>}\n    </div>\n  );\n};\n\nexport default PlacesAutocomplete;\n\n","import React, { Component } from 'react';\nimport { DistanceMatrixService } from '@react-google-maps/api';\n\nclass DistanceMatrixWrapper extends Component {\n  render() {\n    if (this.props.inputs.calculateDistance === false) {\n      //console.log(\"DO NOT DO!\");\n      return;\n    } else {\n      //console.log(\"LET'S GO!\");\n    }\n    const travelMode = 'DRIVING';\n    const position = this.props.inputs.position;\n    const destAdr = this.props.inputs.destinationAddr;\n    const offsetOverride = this.props.inputs.offsetOverride;\n    const origLat = (this.props.inputs.position !== null) ? this.props.inputs.position.coords.latitude : 1.2857166;\n    const origLng = (this.props.inputs.position !== null) ? this.props.inputs.position.coords.longitude : 103.8235629;\n    const destLat = this.props.inputs.destinationLat;\n    const destLng = this.props.inputs.destinationLng;\n    return (\n      <DistanceMatrixService\n        options={{\n          destinations: [{ lat: origLat, lng: origLng }],\n          origins: [{ lat: destLat, lng: destLng }],\n          travelMode: travelMode,\n        }}\n        callback={(res) => {\n          if (position !== null) {\n            let distance = res.rows[0].elements[0];\n            this.props.onChangeDMDistance(distance);\n            if (destAdr !== \"\" && offsetOverride === false) {\n              let duration = distance.duration.value / 60;\n              let offset = Math.ceil(duration / 5) * 5;\n              this.props.onChangeDMOffset(offset);\n            }\n          }\n        }}\n      />\n    );\n  }\n}\n\nexport default DistanceMatrixWrapper;","import React, { Component } from 'react';\nimport { Button } from \"react-bootstrap\";\n\nclass ParkingPeriod extends Component {\n\n  constructor() {\n    super();\n    this.buttons = [\n      'btn-warning',\n      'btn-secondary',\n      'btn-secondary',\n      'btn-secondary',\n      'btn-secondary'\n    ]\n  }\n\n  onClickPeriod = (btnIndex, parkingPeriod) => {\n    for (let i = 0; i < this.buttons.length; ++i) {\n      if (i === btnIndex) {\n        this.buttons[i] = 'btn-warning';\n      } else {\n        this.buttons[i] = 'btn-secondary';\n      }\n    }\n    this.props.onChangeParkingPeriod(parkingPeriod);\n  }\n\n  render() {\n    return (\n      <div className=\"input-group pt-1 pb-2\">\n        <Button className={\"btn fs-5 \" + this.buttons[0]} onClick={() => this.onClickPeriod(0, 0.5)}>30min</Button>\n        <Button className={\"btn fs-5 \" + this.buttons[1]} onClick={() => this.onClickPeriod(1, 1)}>1hr</Button>\n        <Button className={\"btn fs-5 \" + this.buttons[2]} onClick={() => this.onClickPeriod(2, 2)}>2hr</Button>\n        <Button className={\"btn fs-5 \" + this.buttons[3]} onClick={() => this.onClickPeriod(3, 3)}>3hr</Button>\n        <Button className={\"btn fs-5 \" + this.buttons[4]} onClick={() => this.onClickPeriod(4, 6)}>6hr</Button>\n      </div>\n    );\n  }\n}\n\nexport default ParkingPeriod;","import React, { Component } from 'react';\n\nclass ParkingTimeOffset extends Component {\n\n  constructor() {\n    super();\n    this.offsets = [\n      { value: 0, description: 'arrive now' },\n      { value: 5, description: 'arrive in +5min' },\n      { value: 10, description: 'arrive in +10min' },\n      { value: 15, description: 'arrive in +15min' },\n      { value: 20, description: 'arrive in +20min' },\n      { value: 25, description: 'arrive in +25min' },\n      { value: 30, description: 'arrive in +30min' },\n      { value: 35, description: 'arrive in +35min' },\n      { value: 40, description: 'arrive in +40min' },\n      { value: 45, description: 'arrive in +45min' }\n    ];\n  }\n\n  renderOffsetOptions = () => {\n    this.offsets.map((offset) => {\n      return (\n        <option value={offset.value}>{offset.description}</option>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"col-xs-2\">\n        <select className=\"form-select fs-5 bg-warning\" style={{ width: 200 }} value={this.props.offset} onChange={this.props.onChangeOffset}>\n          {this.offsets.map(offset => (\n            <option key={offset.value} value={offset.value}>{offset.description}</option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n\nexport default ParkingTimeOffset;","import React, { Component } from 'react';\nimport { Button } from \"react-bootstrap\";\n\nclass ParkingListItem extends Component {\n\n  onClickDestination = () => {\n    const googleMapUrl = this.props.carparkData.googleMapUrl;\n    window.open(googleMapUrl, '_blank');\n  }\n\n  renderParkingFee = (estimate) => {\n    if (estimate.parkingForbidden === true) {\n      return <div className=\"badge bg-danger\">CLOSED</div>;\n    } else {\n      if (estimate.parkingFee === 0) {\n        return <div className=\"badge bg-primary\">FREE</div>;\n      } else {\n        return <div className=\"badge bg-primary\">S${estimate.parkingFee.toFixed(2)}</div>;\n      }\n    }\n  }\n\n  renderAvailability = (availability) => {\n    if (availability === undefined) return;\n    const lots_available = availability[0].lots_available;\n    if (lots_available !== \"0\") {\n      return <div className=\"badge bg-primary\">{lots_available} lots</div>;\n    } else {\n      return <div className=\"badge bg-danger\">{lots_available} lots</div>;\n    }\n  }\n\n  render() {\n    if (this.props.carparkData === null) return;\n    const availability = this.props.carparkData.carpark.carparkAvailability;\n    const estimate = {\n      parkingFee: this.props.carparkData.fee_structure.parkingFee,\n      parkingForbidden: this.props.carparkData.fee_structure.parkingForbidden\n    };\n    return (\n      <Button\n        onClick={this.onClickDestination}\n        variant=\"light\"\n        className=\"list-group-item list-group-item-action align-items-start d-flex p-3\"\n        style={{ borderRadius: 0 }}>\n\n        <div className=\"col-9\">\n          <div className=\"fw-bold fs-6\">{this.props.carparkData.carpark.name}</div>\n          <div className=\"fs-6\">{this.props.carparkData.carpark.address}</div>\n        </div>\n        <div className=\"col-3 text-end\">\n          {this.renderParkingFee(estimate)}\n          {this.renderAvailability(availability)}\n          <div className=\"badge bg-secondary\">{this.props.carparkData.walkingMinutes} min walk</div>\n        </div>\n\n      </Button>\n    );\n  }\n}\n\nexport default ParkingListItem;\n\n","import React, { Component } from 'react';\nimport ParkingListItem from './ParkingListItem';\n\nclass ParkingList extends Component {\n  render() {\n    if (this.props.shortlists.length < 1) return;\n    return (\n      <div className=\"container-lg px-0 pb-2\">\n        <div className=\"list-group list-group-flush fs-5\">\n          <ParkingListItem carparkData={(this.props.shortlists.length > 0) ? this.props.shortlists[0] : null} />\n          <ParkingListItem carparkData={(this.props.shortlists.length > 1) ? this.props.shortlists[1] : null} />\n          <ParkingListItem carparkData={(this.props.shortlists.length > 2) ? this.props.shortlists[2] : null} />\n          <ParkingListItem carparkData={(this.props.shortlists.length > 3) ? this.props.shortlists[3] : null} />\n          <ParkingListItem carparkData={(this.props.shortlists.length > 4) ? this.props.shortlists[4] : null} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ParkingList;","export class Availability {\n  constructor(onDataLoadCallback) {\n    this.data = null;\n    this.refreshDateTime = null;\n    this.dataError = null;\n    this.dataLoad = false;\n    this.onDataLoadCallback = onDataLoadCallback;\n\n    this.fetchAvailabilityData();\n  }\n\n  fetchAvailabilityData = () => {\n    const url = 'https://www.koleksikatik.com/data/d.json';\n    const method = 'GET';\n    const headers = { 'content-type': 'application/json' };\n\n    fetch(url, { method: method, headers })\n    .then(response => { return response.json() })\n    .then((data) => {\n      this.data = data.items[0].carpark_data;\n      this.refreshDateTime = data.items[0].timestamp;\n      this.dataLoad = true;\n      this.onDataLoadCallback({ timestamp: this.refreshDateTime, data: this.data });\n    }).catch((error) => {\n      this.dataError = error;\n      this.dataLoad = true;\n    });\n  }\n}\n","export class Parking {\n    constructor(parkingRates, parkingBeginDateTime, parkingTimeInMinutes) {\n        this.parkingRates = parkingRates;\n        this.parkingBeginDateTime = parkingBeginDateTime;\n        this.parkingTimeInMinutes = parkingTimeInMinutes;\n        this.parkingStopDateTime = new Date(this.generateStopDateTime(this.parkingBeginDateTime, this.parkingTimeInMinutes));\n        this.parkingFee = 0;\n        this.parkingForbidden = false;\n        this.parkingForbiddenBeginDateTime = null;\n        this.detailParkingRates = [];\n\n        this.populateParkingRates();\n        this.calculateParkingFee();\n    }\n\n    generateStopDateTime = (startDateTime, timeInMinutes) => {\n        return (new Date()).setTime(startDateTime.getTime() + timeInMinutes * 60 * 1000);\n    }\n\n    isDualParkingRate = (parkingRate) => {\n        const rates = parkingRate.split('|');\n        return (rates.length === 1) ? false : true;\n    }\n\n    parseParkingRate = (parkingRate, blockTimeInMinutes) => {\n        const parkingRateFees = {};\n        const subParkingRates = parkingRate.match(/[0-9.]{4}[a-z]{2,}/gi);\n        subParkingRates.forEach(subParkingRate => {\n            const logic = subParkingRate.match(/[a-z]{2,}/gi)[0];\n            const amount = parseFloat(subParkingRate.match(/[0-9.]{4}/gi)[0]);\n            switch (logic) {\n                case 'pm': // per minute\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 1;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'ph': // per hour\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 60;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pa': // per 2 hours\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 120;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pb': // per 3 hours\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 180;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pc': // per 4 hours\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 240;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pd': // per 30 minutes\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 30;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pq': // per 15 minutes\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 15;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'ps': // per 10 minutes\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 10;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pe': // per entry\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = blockTimeInMinutes;\n                    parkingRateFees.coreFeePerEntry = true;\n                    break;\n                case 'fh': // first hour\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 60;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fd': // first 2 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 120;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'ft': // first 3 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 180;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fq': // first 4 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 240;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'ff': // first 5 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 300;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fa': // first 30 mins\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 30;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fb': // first 1.5 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 90;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fc': // first 2.5 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 150;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'sh': // second hour\n                    parkingRateFees.secondFee = amount;\n                    parkingRateFees.secondFeeTimeInMinutes = 60;\n                    parkingRateFees.secondFeeLenInMinutes = 60;\n                    parkingRateFees.secondUsage = false;\n                    break;\n                case 'pqsd': // per 15 min in next 2 hours\n                    parkingRateFees.secondFee = amount;\n                    parkingRateFees.secondFeeTimeInMinutes = 15;\n                    parkingRateFees.secondFeeLenInMinutes = 120;\n                    parkingRateFees.secondUsage = false;\n                    break;\n                case 'phsd': // per hour in next 2 hours\n                    parkingRateFees.secondFee = amount;\n                    parkingRateFees.secondFeeTimeInMinutes = 60;\n                    parkingRateFees.secondFeeLenInMinutes = 120;\n                    parkingRateFees.secondUsage = false;\n                    break;\n                case 'sc': // surcharge\n                    parkingRateFees.surchargeFee = amount;\n                    break;\n                case 'sp': // season parking only\n                    parkingRateFees.coreFee = 0;\n                    parkingRateFees.coreFeeTimeInMinutes = blockTimeInMinutes;\n                    parkingRateFees.coreFeePerEntry = false;\n                    parkingRateFees.seasonParkingOnly = true;\n                    break;\n                case 'np': // no parking\n                    parkingRateFees.coreFee = 0;\n                    parkingRateFees.coreFeeTimeInMinutes = blockTimeInMinutes;\n                    parkingRateFees.coreFeePerEntry = false;\n                    parkingRateFees.noParking = true;\n                    break;\n                case 'mx': // maximum\n                    parkingRateFees.maximumFee = amount;\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        return parkingRateFees;\n    }\n\n    populateParkingRate = (parkingRate, blockSize, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes) => {\n        const detailParkingRateMeta = {};\n        detailParkingRateMeta.name = parkingRate;\n        detailParkingRateMeta.blockSize = blockSize;\n        detailParkingRateMeta.beginDateTime = beginParkingRate;\n        detailParkingRateMeta.stopDateTime = new Date(this.generateStopDateTime(beginParkingRate, blockTimeInMinutes));\n        detailParkingRateMeta.blockTimeInMinutes = blockTimeInMinutes;\n        detailParkingRateMeta.toStopTimeInMinutes = toStopTimeInMinutes;\n        const detailParkingRateFees = this.parseParkingRate(parkingRate, blockTimeInMinutes);\n        const detailParkingRate = {\n            ...detailParkingRateMeta,\n            ...detailParkingRateFees\n        };\n        this.detailParkingRates.push(detailParkingRate);\n        return detailParkingRate.stopDateTime;\n    }\n\n    populateParkingRates = () => {\n        let beginParkingRate = this.parkingBeginDateTime;\n        let toStopTimeInMinutes = this.parkingTimeInMinutes;\n        let blockTimeInMinutes = ((this.isDualParkingRate(this.parkingRates[0])) ? 30 : 60) - this.parkingBeginDateTime.getMinutes();\n        for (let i = 0; i < this.parkingRates.length; ++i) {\n            if (toStopTimeInMinutes === 0) break;\n\n            const parkingRate = this.parkingRates[i];\n            const rates = parkingRate.split('|');\n\n            let nextBlockSize = 60;\n            if (this.parkingRates[i + 1] !== undefined && this.isDualParkingRate(this.parkingRates[i + 1])) {\n                nextBlockSize = 30;\n            }\n\n            if (!this.isDualParkingRate(parkingRate)) {\n                beginParkingRate = this.populateParkingRate(rates[0], 60, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes);\n                toStopTimeInMinutes = toStopTimeInMinutes - blockTimeInMinutes;\n                blockTimeInMinutes = (toStopTimeInMinutes > nextBlockSize) ? nextBlockSize : toStopTimeInMinutes;\n            } else {\n                if (beginParkingRate.getMinutes() < 30) {\n                    beginParkingRate = this.populateParkingRate(rates[0], 30, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes);\n                    toStopTimeInMinutes = toStopTimeInMinutes - blockTimeInMinutes;\n                    blockTimeInMinutes = (toStopTimeInMinutes > 30) ? 30 : toStopTimeInMinutes;\n                } else {\n                    blockTimeInMinutes += 30;\n                }\n\n                if (toStopTimeInMinutes === 0) break;\n                beginParkingRate = this.populateParkingRate(rates[1], 30, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes);\n                toStopTimeInMinutes = toStopTimeInMinutes - blockTimeInMinutes;\n                blockTimeInMinutes = (toStopTimeInMinutes > nextBlockSize) ? nextBlockSize : toStopTimeInMinutes;\n            }\n        }\n    }\n\n    calculateParkingFee = () => {\n        for (let i = 0, subtotalFee = 0, prevRateName = ''; i < this.detailParkingRates.length; ++i) {\n            const detailParkingRate = this.detailParkingRates[i];\n            if (prevRateName !== detailParkingRate.name) {\n                detailParkingRate.type = 'new';\n                this.parkingFee += subtotalFee;\n                subtotalFee = 0;\n\n                if (detailParkingRate.surchargeFee !== undefined && detailParkingRate.surchargeFee > 0) {\n                    subtotalFee += detailParkingRate.surchargeFee;\n                }\n\n                if (detailParkingRate.firstFee !== undefined) {\n                    subtotalFee += detailParkingRate.firstFee;\n                    detailParkingRate.firstUsage = true;\n                    if (detailParkingRate.firstFeeTimeInMinutes > detailParkingRate.blockTimeInMinutes) {\n                        detailParkingRate.extra = detailParkingRate.firstFeeTimeInMinutes - detailParkingRate.blockTimeInMinutes;\n                    } else {\n                        let periodInBlock = detailParkingRate.blockTimeInMinutes - detailParkingRate.firstFeeTimeInMinutes;\n                        let multiplier = Math.ceil(periodInBlock / detailParkingRate.coreFeeTimeInMinutes);\n                        let period = multiplier * detailParkingRate.coreFeeTimeInMinutes;\n                        let amount = detailParkingRate.coreFee * multiplier;\n                        subtotalFee += amount;\n                        detailParkingRate.extra = period - periodInBlock;\n                    }\n                } else { // NOTE: this includes the per entry fee\n                    //let periodInBlock = detailParkingRate.blockTimeInMinutes; // NOTE: Fix for the 30 minutes parking\n                    let periodInBlock = (detailParkingRate.blockTimeInMinutes < detailParkingRate.toStopTimeInMinutes) ? detailParkingRate.blockTimeInMinutes : detailParkingRate.toStopTimeInMinutes;\n                    let multiplier = Math.ceil(periodInBlock / detailParkingRate.coreFeeTimeInMinutes);\n                    let period = multiplier * detailParkingRate.coreFeeTimeInMinutes;\n                    let amount = detailParkingRate.coreFee * multiplier;\n                    subtotalFee += amount;\n                    detailParkingRate.extra = period - periodInBlock;\n                }\n\n            } else {\n                detailParkingRate.type = 'continue';\n\n                if (this.detailParkingRates[i - 1].firstUsage !== undefined && this.detailParkingRates[i - 1].firstUsage === true) {\n                    detailParkingRate.firstUsage = true;\n                }\n\n                if (this.detailParkingRates[i - 1].secondUsage !== undefined && this.detailParkingRates[i - 1].secondUsage === true) {\n                    detailParkingRate.secondUsage = true;\n                }\n\n                if (detailParkingRate.coreFeePerEntry === true) {\n                    // NOTE: do nothing if it is per entry fee\n                } else {\n                    let prevExtra = this.detailParkingRates[i - 1].extra;\n                    if (detailParkingRate.secondUsage !== undefined && detailParkingRate.secondUsage === false && detailParkingRate.firstUsage === true) {\n                        if (prevExtra < detailParkingRate.blockTimeInMinutes) {\n                            // NOTE: activate second fee\n                            let periodToEnd = ((detailParkingRate.secondFeeLenInMinutes < detailParkingRate.toStopTimeInMinutes) ? detailParkingRate.secondFeeLenInMinutes : detailParkingRate.toStopTimeInMinutes);\n                            let periodInBlock = detailParkingRate.blockTimeInMinutes - prevExtra;\n                            let multiplier = Math.ceil(periodToEnd / detailParkingRate.secondFeeTimeInMinutes);\n                            let period = multiplier * detailParkingRate.secondFeeTimeInMinutes;\n                            let amount = detailParkingRate.secondFee * multiplier;\n                            subtotalFee += amount;\n                            detailParkingRate.extra = period - periodInBlock;\n                            detailParkingRate.secondUsage = true;\n                        } else {\n                            detailParkingRate.extra = prevExtra - detailParkingRate.blockTimeInMinutes;\n                        }\n                    } else {\n                        if (prevExtra < detailParkingRate.blockTimeInMinutes) {\n                            let periodInBlock = detailParkingRate.blockTimeInMinutes - prevExtra;\n                            let multiplier = Math.ceil(periodInBlock / detailParkingRate.coreFeeTimeInMinutes);\n                            let period = multiplier * detailParkingRate.coreFeeTimeInMinutes;\n                            let amount = detailParkingRate.coreFee * multiplier;\n                            subtotalFee += amount;\n                            detailParkingRate.extra = period - periodInBlock;\n                        } else {\n                            detailParkingRate.extra = prevExtra - detailParkingRate.blockTimeInMinutes;\n                        }\n                    }\n                }\n            }\n\n            if (detailParkingRate.maximumFee !== undefined && detailParkingRate.maximumFee > 0) {\n                let maximumFee = detailParkingRate.maximumFee;\n                subtotalFee = (subtotalFee > maximumFee) ? maximumFee : subtotalFee;\n            }\n\n            if (this.parkingForbidden === false && (detailParkingRate.seasonParkingOnly === true || detailParkingRate.noParking === true)) {\n                this.parkingForbidden = true;\n                this.parkingForbiddenBeginDateTime = detailParkingRate.beginDateTime;\n            }\n\n            if ((i + 1) === this.detailParkingRates.length) {\n                this.parkingFee += subtotalFee;\n            }\n\n            prevRateName = this.detailParkingRates[i].name;\n        }\n    }\n}\n","import Carparks from \"../data.json\";\nimport { Parking } from \"./Parking\";\n\nexport class CarparkShortlist {\n  constructor(originLat, originLng, destinationLat, destinationLng, maxDistance, carparkAvailability) {\n    this.originLat = originLat;\n    this.originLng = originLng;\n    this.destinationLat = destinationLat;\n    this.destinationLng = destinationLng;\n    this.maxDistance = maxDistance;\n    this.carparkAvailablity = carparkAvailability;\n    this.walkingSpeed = 3; // NOTE: this is 3 km per hour\n    this.shortlists = [];\n\n    this.populateShortlistedCarparks();\n    this.populateCarparkAvailability();\n    this.sortShortlistsByDistance(this.shortlists);\n  }\n\n  getDistanceFromLatLngInKm = (lat1, lng1, lat2, lng2) => {\n    const deg2rad = (deg) => {\n      return deg * (Math.PI / 180);\n    }\n    const R = 6371; // Radius of the earth in km\n    const dLat = deg2rad(lat2 - lat1);\n    const dLng = deg2rad(lng2 - lng1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c; // Distance in km\n    return d;\n  }\n\n  sorterLogic = (a, b) => {\n    return a.distance - b.distance;\n  }\n\n  sortShortlistsByDistance = (arr) => {\n    if (arr === undefined || arr.length < 1) return;\n    arr.sort(this.sorterLogic);\n  }\n\n  generateGoogleMapUrl = (carparkLat, carparkLng) => {\n    const origin = \"&origin=\" + this.originLat + \",\" + this.originLng;\n    const destination = \"&destination=\" + carparkLat + \",\" + carparkLng;\n    const travelMode = \"&travelmode=driving\";\n    const googleMapUrl = \"https://www.google.com/maps/dir/?api=1\" + origin + destination + travelMode;\n    return googleMapUrl;\n  }\n\n  populateShortlistedCarparks = () => {\n    Carparks.map((carpark) => {\n      const googleMapUrl = this.generateGoogleMapUrl(carpark.lat, carpark.lng);\n      const distance = this.getDistanceFromLatLngInKm(this.destinationLat, this.destinationLng, carpark.lat, carpark.lng);\n      const walkingMinutes = Math.ceil(distance / this.walkingSpeed * 60);\n      if (distance < this.maxDistance) {\n        this.shortlists.push({ carpark, distance, walkingMinutes, googleMapUrl });\n      }\n      return true;\n    });\n  }\n\n  populateCarparkAvailability = () => {\n    if (this.carparkAvailablity === undefined) return;\n    this.shortlists.forEach(shortlist => {\n      const carparkNo = shortlist.carpark.car_park_no;\n      this.carparkAvailablity.data.forEach(availability => {\n        const availabilityCarparkNo = availability.carpark_number;\n        if (carparkNo === availabilityCarparkNo) {\n          shortlist.carpark.carparkAvailability = availability.carpark_info;\n        }\n      })\n    });\n  }\n\n  calculateParkingFee = (period, offset) => {\n    const startParking = new Date(Date.now() + offset * 60 * 1000);\n    const parkingPeriod = period * 60;\n    const day = startParking.getDay(); // NOTE: Sunday=0, Monday=1, ...\n    const hour = startParking.getHours();\n    const beginIndex = day * 24 + hour;\n    const endIndex = beginIndex + Math.ceil(period) + 2;\n    this.shortlists.forEach(shortlist => {\n      const carparkRatesRaw = [...shortlist.carpark.carpark_rates, ...shortlist.carpark.carpark_rates];\n      const carparkRates = carparkRatesRaw.slice(beginIndex, endIndex);\n      shortlist.fee_structure = new Parking(carparkRates, startParking, parkingPeriod);\n    });\n  }\n\n  getCarparks = () => {\n    return this.shortlists;\n  }\n}","import \"./App.css\";\nimport PlacesAutocomplete from \"./components/PlacesAutocomplete\";\nimport DistanceMatrixWrapper from \"./components/DistanceMatrixWrapper\";\nimport ParkingPeriod from \"./components/ParkingPeriod\";\nimport ParkingTimeOffset from \"./components/ParkingTimeOffset\";\nimport ParkingList from \"./components/ParkingList\";\nimport React from \"react\";\nimport { Availability } from \"./lib/Availability\";\nimport { CarparkShortlist } from \"./lib/CarparkShortlist\";\n\nclass App extends React.Component {\n  state = {\n    position: null,\n    distance: null,\n    availability: {},\n    offsetOverride: false,\n    calculateDistance: false,\n    originLat: 0,\n    originLng: 0,\n    destinationAddr: \"\",\n    destinationLat: 0,\n    destinationLng: 0,\n    destinationSearchRadius: 1,\n    timeToDestination: 0,\n    parkingPeriod: 0.5,\n    shortlists: []\n  };\n\n  componentDidMount = () => {\n    new Availability(this.onDataLoadCallback);\n    navigator.geolocation.getCurrentPosition((position) => {\n      const originLat = position.coords.latitude;\n      const originLng = position.coords.longitude;\n      this.setState({ position, originLat, originLng });\n    });\n  }\n\n  refreshCarparkShortlist = () => {\n    if (this.state.destinationAddr === \"\") return;\n    const carparkShortlist = new CarparkShortlist(\n      this.state.originLat,\n      this.state.originLng,\n      this.state.destinationLat,\n      this.state.destinationLng,\n      this.state.destinationSearchRadius,\n      this.state.availability);\n    carparkShortlist.calculateParkingFee(this.state.parkingPeriod, this.state.timeToDestination);\n    const shortlists = carparkShortlist.getCarparks();\n    this.setState({ shortlists: shortlists }, () => {\n      //console.log(this.state);\n    });\n  }\n\n  onSelectDestination = (destinationData) => {\n    this.setState({ offsetOverride: false, calculateDistance: true });\n    this.setState(destinationData, this.refreshCarparkShortlist);\n  }\n\n  onChangeParkingPeriod = (parkingPeriod) => {\n    this.setState({ parkingPeriod: parkingPeriod }, this.refreshCarparkShortlist);\n  }\n\n  onChangeOffset = (event) => {\n    this.setState({ offsetOverride: true, timeToDestination: event.target.value }, this.refreshCarparkShortlist);\n  }\n\n  onChangeDMDistance = (distance) => {\n    this.setState({ distance: distance }, this.refreshCarparkShortlist);\n  }\n\n  onChangeDMOffset = (offset) => {\n    if (this.state.offsetOverride === true) return; // NOTE: when will offset be override\n    this.setState({ timeToDestination: offset, calculateDistance: false }, this.refreshCarparkShortlist);\n  }\n\n  onDataLoadCallback = (availability) => {\n    this.setState({ availability: availability }, this.refreshCarparkShortlist);\n  }\n\n  render() {\n    return (\n      <main>\n        <div className=\"container-fluid bg-secondary pt-4 pb-2 px-0 mx-0\">\n          <div className=\"container\">\n            <div className=\"text-start text-md-center text-light pt-3 pb-3\">\n              <h1><span className=\"fw-bold fs-1\">Nearest</span> parking</h1>\n            </div>\n            <PlacesAutocomplete\n              inputs={this.state}\n              onSelectDestination={this.onSelectDestination} />\n            <DistanceMatrixWrapper\n              inputs={this.state}\n              onChangeDMDistance={this.onChangeDMDistance}\n              onChangeDMOffset={this.onChangeDMOffset} />\n          </div>\n        </div>\n        <div className=\"container-fluid p-0 m-0\">\n          <div className=\"container-lg py-2\">\n            <ParkingPeriod onChangeParkingPeriod={this.onChangeParkingPeriod} />\n            <ParkingTimeOffset offset={this.state.timeToDestination} onChangeOffset={this.onChangeOffset} />\n          </div>\n          <ParkingList\n            position={this.state.position}\n            offset={this.state.timeToDestination}\n            period={this.state.parkingPeriod}\n            shortlists={this.state.shortlists} />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}