{"version":3,"sources":["components/PlacesAutocomplete.jsx","lib/Parking.jsx","components/Carpark.jsx","components/CarparkSection.jsx","components/DistanceMatrixWrapper.jsx","lib/Availability.jsx","App.js","reportWebVitals.js","index.js"],"names":["PlacesAutocomplete","props","_usePlacesAutocomplet","usePlacesAutocomplete","requestOptions","componentRestrictions","country","debounce","ready","value","_usePlacesAutocomplet2","suggestions","status","data","setValue","clearSuggestions","ref","useOnclickOutside","handleSelect","_ref","description","getGeocode","address","then","results","getLatLng","_ref2","lat","lng","onSelectDestination","catch","error","console","log","react_default","a","createElement","InputGroup","className","Form","Control","type","placeholder","aria-label","aria-describedby","onChange","e","target","disabled","map","suggestion","place_id","_suggestion$structure","structured_formatting","main_text","secondary_text","key","onClick","Parking","parkingRates","parkingBeginDateTime","parkingTimeInMinutes","_this","this","Object","classCallCheck","generateStopDateTime","startDateTime","timeInMinutes","Date","setTime","getTime","isDualParkingRate","parkingRate","split","length","parseParkingRate","blockTimeInMinutes","parkingRateFees","match","forEach","subParkingRate","logic","amount","parseFloat","coreFee","coreFeeTimeInMinutes","coreFeePerEntry","firstFee","firstFeeTimeInMinutes","firstUsage","secondFee","secondFeeTimeInMinutes","secondFeeLenInMinutes","secondUsage","surchargeFee","seasonParkingOnly","noParking","maximumFee","populateParkingRate","blockSize","beginParkingRate","toStopTimeInMinutes","detailParkingRateMeta","name","beginDateTime","stopDateTime","detailParkingRateFees","detailParkingRate","objectSpread","detailParkingRates","push","populateParkingRates","getMinutes","i","rates","nextBlockSize","undefined","calculateParkingFee","subtotalFee","prevRateName","parkingFee","extra","periodInBlock","multiplier","Math","ceil","period","prevExtra","periodToEnd","parkingForbidden","parkingForbiddenBeginDateTime","parkingStopDateTime","Carpark","getCarparkFeeEstimate","carparkData","offset","startParking","now","parkingPeriod","beginIndex","getDay","getHours","endIndex","carparkRates","concat","toConsumableArray","carpark","carpark_rates","slice","parking","onClickDestination","url","position","coords","latitude","longitude","window","open","renderParkingFee","estimate","toFixed","renderAvailability","availability","lots_available","carparkAvailability","Button","variant","style","borderRadius","walkingminutes","Component","CarparkSection","shortlists","components_Carpark","DistanceMatrixWrapper","inputs","calculateDistance","destAdr","offsetOverride","origLat","origLng","destLat","destLng","esm","options","destinations","origins","travelMode","callback","res","distance","rows","elements","onChangeDMDistance","duration","onChangeDMOffset","Availability","onDataLoadCallback","fetchAvailabilityData","fetch","method","headers","content-type","response","json","items","carpark_data","refreshDateTime","timestamp","dataLoad","dataError","App","state","buttons","componentDidMount","navigator","geolocation","getCurrentPosition","setState","getDistanceFromLatLngInKm","lat1","lng1","lat2","lng2","deg2rad","deg","PI","dLat","dLng","sin","cos","atan2","sqrt","getShortlistedCarparks","maxDistance","sorter","b","Carparks","sort","shortlist","carparkNo","car_park_no","availabilityCarparkNo","carpark_number","carpark_info","destinationData","onClickPeriod","index","onClickPeriod1","onClickPeriod2","onClickPeriod3","onClickPeriod4","onClickPeriod5","onChangeOffset","event","components_PlacesAutocomplete","width","components_DistanceMatrixWrapper","components_CarparkSection","React","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.f90547f7.chunk.js","sourcesContent":["import React from 'react';\nimport usePlacesAutocomplete, { getGeocode, getLatLng } from \"use-places-autocomplete\";\nimport useOnclickOutside from \"react-cool-onclickoutside\";\nimport { InputGroup, Form } from \"react-bootstrap\";\n\nconst PlacesAutocomplete = (props) => {\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      /* Define search scope here */\n      componentRestrictions: { country: 'sg', },\n    },\n    debounce: 300,\n  });\n\n  const ref = useOnclickOutside(() => {\n    // When user clicks outside of the component, we can dismiss\n    // the searched suggestions by calling this method\n    clearSuggestions();\n  });\n\n  const handleInput = (e) => {\n    // Update the keyword of the input element\n    setValue(e.target.value);\n  };\n\n  const handleSelect = ({ description }) =>\n    () => {\n      // When user selects a place, we can replace the keyword without request data from API\n      // by setting the second parameter to \"false\"\n      setValue(description, false);\n      clearSuggestions();\n\n      // Get latitude and longitude via utility functions\n      getGeocode({ address: description })\n        .then((results) => getLatLng(results[0]))\n        .then(({ lat, lng }) => {\n          //console.log(\"Coordinates: \", { lat, lng });\n          props.onSelectDestination({ address: description, lat, lng });\n        })\n        .catch((error) => {\n          console.log(\"Error: \", error);\n        });\n    };\n\n  const renderSuggestions = () =>\n    data.map((suggestion) => {\n      const {\n        place_id,\n        structured_formatting: { main_text, secondary_text },\n      } = suggestion;\n\n      return (\n        <div className=\"dropdown-item\" key={place_id} onClick={handleSelect(suggestion)}>\n          <strong>{main_text}</strong> <small>{secondary_text}</small>\n        </div>\n      );\n    });\n\n  return (\n    <div ref={ref}>\n      <InputGroup className=\"mb-1\">\n        <Form.Control\n          type=\"search\"\n          className=\"fs-5\"\n          placeholder=\"Destination\"\n          aria-label=\"Destination\"\n          aria-describedby=\"basic-addon2\"\n          onChange={handleInput}\n          disabled={!ready}\n          value={value} />\n      </InputGroup>\n      {/* We can use the \"status\" to decide whether we should display the dropdown or not */}\n      {status === \"OK\" && <div className=\"dropdown\"><div className=\"dropdown-menu d-block fs-5\">{renderSuggestions()}</div></div>}\n    </div>\n  );\n};\n\nexport default PlacesAutocomplete;\n\n","export class Parking {\n    constructor(parkingRates, parkingBeginDateTime, parkingTimeInMinutes) {\n        this.parkingRates = parkingRates;\n        this.parkingBeginDateTime = parkingBeginDateTime;\n        this.parkingTimeInMinutes = parkingTimeInMinutes;\n        this.parkingStopDateTime = new Date(this.generateStopDateTime(this.parkingBeginDateTime, this.parkingTimeInMinutes));\n        this.parkingFee = 0;\n        this.parkingForbidden = false;\n        this.parkingForbiddenBeginDateTime = null;\n        this.detailParkingRates = [];\n\n        this.populateParkingRates();\n        this.calculateParkingFee();\n    }\n\n    generateStopDateTime = (startDateTime, timeInMinutes) => {\n        return (new Date()).setTime(startDateTime.getTime() + timeInMinutes * 60 * 1000);\n    }\n\n    isDualParkingRate = (parkingRate) => {\n        const rates = parkingRate.split('|');\n        return (rates.length === 1) ? false : true;\n    }\n\n    parseParkingRate = (parkingRate, blockTimeInMinutes) => {\n        const parkingRateFees = {};\n        const subParkingRates = parkingRate.match(/[0-9.]{4}[a-z]{2,}/gi);\n        subParkingRates.forEach(subParkingRate => {\n            const logic = subParkingRate.match(/[a-z]{2,}/gi)[0];\n            const amount = parseFloat(subParkingRate.match(/[0-9.]{4}/gi)[0]);\n            switch (logic) {\n                case 'pm': // per minute\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 1;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'ph': // per hour\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 60;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pa': // per 2 hours\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 120;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pb': // per 3 hours\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 180;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pc': // per 4 hours\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 240;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pd': // per 30 minutes\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 30;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pq': // per 15 minutes\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 15;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'ps': // per 10 minutes\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = 10;\n                    parkingRateFees.coreFeePerEntry = false;\n                    break;\n                case 'pe': // per entry\n                    parkingRateFees.coreFee = amount;\n                    parkingRateFees.coreFeeTimeInMinutes = blockTimeInMinutes;\n                    parkingRateFees.coreFeePerEntry = true;\n                    break;\n                case 'fh': // first hour\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 60;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fd': // first 2 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 120;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'ft': // first 3 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 180;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fq': // first 4 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 240;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'ff': // first 5 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 300;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fa': // first 30 mins\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 30;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fb': // first 1.5 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 90;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'fc': // first 2.5 hours\n                    parkingRateFees.firstFee = amount;\n                    parkingRateFees.firstFeeTimeInMinutes = 150;\n                    parkingRateFees.firstUsage = false;\n                    break;\n                case 'sh': // second hour\n                    parkingRateFees.secondFee = amount;\n                    parkingRateFees.secondFeeTimeInMinutes = 60;\n                    parkingRateFees.secondFeeLenInMinutes = 60;\n                    parkingRateFees.secondUsage = false;\n                    break;\n                case 'pqsd': // per 15 min in next 2 hours\n                    parkingRateFees.secondFee = amount;\n                    parkingRateFees.secondFeeTimeInMinutes = 15;\n                    parkingRateFees.secondFeeLenInMinutes = 120;\n                    parkingRateFees.secondUsage = false;\n                    break;\n                case 'phsd': // per hour in next 2 hours\n                    parkingRateFees.secondFee = amount;\n                    parkingRateFees.secondFeeTimeInMinutes = 60;\n                    parkingRateFees.secondFeeLenInMinutes = 120;\n                    parkingRateFees.secondUsage = false;\n                    break;\n                case 'sc': // surcharge\n                    parkingRateFees.surchargeFee = amount;\n                    break;\n                case 'sp': // season parking only\n                    parkingRateFees.coreFee = 0;\n                    parkingRateFees.coreFeeTimeInMinutes = blockTimeInMinutes;\n                    parkingRateFees.coreFeePerEntry = false;\n                    parkingRateFees.seasonParkingOnly = true;\n                    break;\n                case 'np': // no parking\n                    parkingRateFees.coreFee = 0;\n                    parkingRateFees.coreFeeTimeInMinutes = blockTimeInMinutes;\n                    parkingRateFees.coreFeePerEntry = false;\n                    parkingRateFees.noParking = true;\n                    break;\n                case 'mx': // maximum\n                    parkingRateFees.maximumFee = amount;\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        return parkingRateFees;\n    }\n\n    populateParkingRate = (parkingRate, blockSize, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes) => {\n        const detailParkingRateMeta = {};\n        detailParkingRateMeta.name = parkingRate;\n        detailParkingRateMeta.blockSize = blockSize;\n        detailParkingRateMeta.beginDateTime = beginParkingRate;\n        detailParkingRateMeta.stopDateTime = new Date(this.generateStopDateTime(beginParkingRate, blockTimeInMinutes));\n        detailParkingRateMeta.blockTimeInMinutes = blockTimeInMinutes;\n        detailParkingRateMeta.toStopTimeInMinutes = toStopTimeInMinutes;\n        const detailParkingRateFees = this.parseParkingRate(parkingRate, blockTimeInMinutes);\n        const detailParkingRate = {\n            ...detailParkingRateMeta,\n            ...detailParkingRateFees\n        };\n        this.detailParkingRates.push(detailParkingRate);\n        return detailParkingRate.stopDateTime;\n    }\n\n    populateParkingRates = () => {\n        let beginParkingRate = this.parkingBeginDateTime;\n        let toStopTimeInMinutes = this.parkingTimeInMinutes;\n        let blockTimeInMinutes = ((this.isDualParkingRate(this.parkingRates[0])) ? 30 : 60) - this.parkingBeginDateTime.getMinutes();\n        for (let i = 0; i < this.parkingRates.length; ++i) {\n            if (toStopTimeInMinutes === 0) break;\n\n            const parkingRate = this.parkingRates[i];\n            const rates = parkingRate.split('|');\n\n            let nextBlockSize = 60;\n            if (this.parkingRates[i + 1] !== undefined && this.isDualParkingRate(this.parkingRates[i + 1])) {\n                nextBlockSize = 30;\n            }\n\n            if (!this.isDualParkingRate(parkingRate)) {\n                beginParkingRate = this.populateParkingRate(rates[0], 60, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes);\n                toStopTimeInMinutes = toStopTimeInMinutes - blockTimeInMinutes;\n                blockTimeInMinutes = (toStopTimeInMinutes > nextBlockSize) ? nextBlockSize : toStopTimeInMinutes;\n            } else {\n                if (beginParkingRate.getMinutes() < 30) {\n                    beginParkingRate = this.populateParkingRate(rates[0], 30, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes);\n                    toStopTimeInMinutes = toStopTimeInMinutes - blockTimeInMinutes;\n                    blockTimeInMinutes = (toStopTimeInMinutes > 30) ? 30 : toStopTimeInMinutes;\n                } else {\n                    blockTimeInMinutes += 30;\n                }\n\n                if (toStopTimeInMinutes === 0) break;\n                beginParkingRate = this.populateParkingRate(rates[1], 30, beginParkingRate, blockTimeInMinutes, toStopTimeInMinutes);\n                toStopTimeInMinutes = toStopTimeInMinutes - blockTimeInMinutes;\n                blockTimeInMinutes = (toStopTimeInMinutes > nextBlockSize) ? nextBlockSize : toStopTimeInMinutes;\n            }\n        }\n    }\n\n    calculateParkingFee = () => {\n        for (let i = 0, subtotalFee = 0, prevRateName = ''; i < this.detailParkingRates.length; ++i) {\n            const detailParkingRate = this.detailParkingRates[i];\n            if (prevRateName !== detailParkingRate.name) {\n                detailParkingRate.type = 'new';\n                this.parkingFee += subtotalFee;\n                subtotalFee = 0;\n\n                if (detailParkingRate.surchargeFee !== undefined && detailParkingRate.surchargeFee > 0) {\n                    subtotalFee += detailParkingRate.surchargeFee;\n                }\n\n                if (detailParkingRate.firstFee !== undefined) {\n                    subtotalFee += detailParkingRate.firstFee;\n                    detailParkingRate.firstUsage = true;\n                    if (detailParkingRate.firstFeeTimeInMinutes > detailParkingRate.blockTimeInMinutes) {\n                        detailParkingRate.extra = detailParkingRate.firstFeeTimeInMinutes - detailParkingRate.blockTimeInMinutes;\n                    } else {\n                        let periodInBlock = detailParkingRate.blockTimeInMinutes - detailParkingRate.firstFeeTimeInMinutes;\n                        let multiplier = Math.ceil(periodInBlock / detailParkingRate.coreFeeTimeInMinutes);\n                        let period = multiplier * detailParkingRate.coreFeeTimeInMinutes;\n                        let amount = detailParkingRate.coreFee * multiplier;\n                        subtotalFee += amount;\n                        detailParkingRate.extra = period - periodInBlock;\n                    }\n                } else { // NOTE: this includes the per entry fee\n                    let periodInBlock = detailParkingRate.blockTimeInMinutes;\n                    let multiplier = Math.ceil(periodInBlock / detailParkingRate.coreFeeTimeInMinutes);\n                    let period = multiplier * detailParkingRate.coreFeeTimeInMinutes;\n                    let amount = detailParkingRate.coreFee * multiplier;\n                    subtotalFee += amount;\n                    detailParkingRate.extra = period - periodInBlock;\n                }\n\n            } else {\n                detailParkingRate.type = 'continue';\n\n                if (this.detailParkingRates[i - 1].firstUsage !== undefined && this.detailParkingRates[i - 1].firstUsage === true) {\n                    detailParkingRate.firstUsage = true;\n                }\n\n                if (this.detailParkingRates[i - 1].secondUsage !== undefined && this.detailParkingRates[i - 1].secondUsage === true) {\n                    detailParkingRate.secondUsage = true;\n                }\n\n                if (detailParkingRate.coreFeePerEntry === true) {\n                    // NOTE: do nothing if it is per entry fee\n                } else {\n                    let prevExtra = this.detailParkingRates[i - 1].extra;\n                    if (detailParkingRate.secondUsage !== undefined && detailParkingRate.secondUsage === false && detailParkingRate.firstUsage === true) {\n                        if (prevExtra < detailParkingRate.blockTimeInMinutes) {\n                            // NOTE: activate second fee\n                            let periodToEnd = ((detailParkingRate.secondFeeLenInMinutes < detailParkingRate.toStopTimeInMinutes) ? detailParkingRate.secondFeeLenInMinutes : detailParkingRate.toStopTimeInMinutes);\n                            let periodInBlock = detailParkingRate.blockTimeInMinutes - prevExtra;\n                            let multiplier = Math.ceil(periodToEnd / detailParkingRate.secondFeeTimeInMinutes);\n                            let period = multiplier * detailParkingRate.secondFeeTimeInMinutes;\n                            let amount = detailParkingRate.secondFee * multiplier;\n                            subtotalFee += amount;\n                            detailParkingRate.extra = period - periodInBlock;\n                            detailParkingRate.secondUsage = true;\n                        } else {\n                            detailParkingRate.extra = prevExtra - detailParkingRate.blockTimeInMinutes;\n                        }\n                    } else {\n                        if (prevExtra < detailParkingRate.blockTimeInMinutes) {\n                            let periodInBlock = detailParkingRate.blockTimeInMinutes - prevExtra;\n                            let multiplier = Math.ceil(periodInBlock / detailParkingRate.coreFeeTimeInMinutes);\n                            let period = multiplier * detailParkingRate.coreFeeTimeInMinutes;\n                            let amount = detailParkingRate.coreFee * multiplier;\n                            subtotalFee += amount;\n                            detailParkingRate.extra = period - periodInBlock;\n                        } else {\n                            detailParkingRate.extra = prevExtra - detailParkingRate.blockTimeInMinutes;\n                        }\n                    }\n                }\n            }\n\n            if (detailParkingRate.maximumFee !== undefined && detailParkingRate.maximumFee > 0) {\n                let maximumFee = detailParkingRate.maximumFee;\n                subtotalFee = (subtotalFee > maximumFee) ? maximumFee : subtotalFee;\n            }\n\n            if (this.parkingForbidden === false && (detailParkingRate.seasonParkingOnly === true || detailParkingRate.noParking === true)) {\n                this.parkingForbidden = true;\n                this.parkingForbiddenBeginDateTime = detailParkingRate.beginDateTime;\n            }\n\n            if ((i + 1) === this.detailParkingRates.length) {\n                this.parkingFee += subtotalFee;\n            }\n\n            prevRateName = this.detailParkingRates[i].name;\n        }\n    }\n}\n","import React, { Component } from 'react';\nimport { Parking } from \"../lib/Parking\";\nimport { Button } from \"react-bootstrap\";\n\nclass Carpark extends Component {\n\n    getCarparkFeeEstimate = (carparkData, period, offset) => {\n        const startParking = new Date(Date.now() + offset * 60 * 1000);\n        const parkingPeriod = period * 60;\n        const day = startParking.getDay(); // NOTE: Sunday=0, Monday=1, ...\n        const hour = startParking.getHours();\n        const beginIndex = day * 24 + hour;\n        const endIndex = beginIndex + Math.ceil(period) + 2;\n        const carparkRatesRaw = [...carparkData.carpark.carpark_rates, ...carparkData.carpark.carpark_rates];\n        const carparkRates = carparkRatesRaw.slice(beginIndex, endIndex);\n        const parking = new Parking(carparkRates, startParking, parkingPeriod);\n        return { parkingFee: parking.parkingFee, parkingForbidden: parking.parkingForbidden };\n    };\n\n    onClickDestination = () => {\n        const origLat = (this.props.position !== null) ? this.props.position.coords.latitude : 1.2857166;\n        const origLng = (this.props.position !== null) ? this.props.position.coords.longitude : 103.8235629;\n        const destLat = this.props.carparkData.carpark.lat;\n        const destLng = this.props.carparkData.carpark.lng;\n        const url = \"https://www.google.com/maps/dir/?api=1&origin=\" + origLat + \",\" + origLng + \"&destination=\" + destLat + \",\" + destLng + \"&travelmode=driving\";\n        window.open(url, '_blank');\n    }\n\n    renderParkingFee = (estimate) => {\n        if (estimate.parkingForbidden === true) {\n            return <div className=\"badge bg-danger\">CLOSED</div>;\n        } else {\n            if (estimate.parkingFee === 0) {\n                return <div className=\"badge bg-primary\">FREE</div>;\n            } else {\n                return <div className=\"badge bg-primary\">S${estimate.parkingFee.toFixed(2)}</div>;\n            }\n        }\n    }\n\n    renderAvailability = (availability) => {\n        if (availability === undefined) return;\n        const lots_available = availability[0].lots_available;\n        if (lots_available !== \"0\") {\n            return <div className=\"badge bg-primary\">{lots_available} lots</div>;\n        } else {\n            return <div className=\"badge bg-danger\">{lots_available} lots</div>;\n        }\n    }\n\n    render() {\n        if (this.props.carparkData === null) return;\n        const availability = this.props.carparkData.carpark.carparkAvailability;\n        const estimate = this.getCarparkFeeEstimate(this.props.carparkData, this.props.period, this.props.offset);\n        return (\n            <Button\n                onClick={this.onClickDestination}\n                variant=\"light\"\n                className=\"list-group-item list-group-item-action align-items-start d-flex p-0 py-2\"\n                style={{ borderRadius: 0 }}>\n\n                <div className=\"col-9\">\n                    <div className=\"fw-bold fs-6\">{this.props.carparkData.carpark.name}</div>\n                    <div className=\"fs-6\">{this.props.carparkData.carpark.address}</div>\n                </div>\n                <div className=\"col-3 text-end\">\n                    {this.renderParkingFee(estimate)}\n                    {this.renderAvailability(availability)}\n                    <div className=\"badge bg-secondary\">{this.props.carparkData.walkingminutes} min walk</div>\n                </div>\n\n            </Button>\n        );\n    }\n}\n\nexport default Carpark;\n\n","import React, { Component } from 'react';\nimport Carpark from './Carpark';\n\nclass CarparkSection extends Component {\n  render() {\n    if (this.props.shortlists.length < 1) return;\n    return (\n      <div className=\"container pb-2\">\n        <div className=\"list-group list-group-flush fs-5\">\n          <Carpark position={this.props.position} offset={this.props.offset} period={this.props.period} carparkData={(this.props.shortlists.length > 0) ? this.props.shortlists[0] : null} />\n          <Carpark position={this.props.position} offset={this.props.offset} period={this.props.period} carparkData={(this.props.shortlists.length > 1) ? this.props.shortlists[1] : null} />\n          <Carpark position={this.props.position} offset={this.props.offset} period={this.props.period} carparkData={(this.props.shortlists.length > 2) ? this.props.shortlists[2] : null} />\n          <Carpark position={this.props.position} offset={this.props.offset} period={this.props.period} carparkData={(this.props.shortlists.length > 3) ? this.props.shortlists[3] : null} />\n          <Carpark position={this.props.position} offset={this.props.offset} period={this.props.period} carparkData={(this.props.shortlists.length > 4) ? this.props.shortlists[4] : null} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CarparkSection;","import React, { Component } from 'react';\nimport { DistanceMatrixService } from '@react-google-maps/api';\n\nclass DistanceMatrixWrapper extends Component {\n  render() {\n    if (this.props.inputs.calculateDistance === false) {\n      // NOTE: console.log(\"DO NOT DO!\");\n      return;\n    } else {\n      // NOTE: console.log(\"LET'S GO!\");\n    }\n    const travelMode = 'DRIVING';\n    const position = this.props.inputs.position;\n    const destAdr = this.props.inputs.address;\n    const offsetOverride = this.props.inputs.offsetOverride;\n    const origLat = (this.props.inputs.position !== null) ? this.props.inputs.position.coords.latitude : 1.2857166;\n    const origLng = (this.props.inputs.position !== null) ? this.props.inputs.position.coords.longitude : 103.8235629;\n    const destLat = this.props.inputs.lat;\n    const destLng = this.props.inputs.lng;\n    return (\n      <DistanceMatrixService\n        options={{\n          destinations: [{ lat: origLat, lng: origLng }],\n          origins: [{ lat: destLat, lng: destLng }],\n          travelMode: travelMode,\n        }}\n        callback={(res) => {\n          if (position !== null) {\n            let distance = res.rows[0].elements[0];\n            this.props.onChangeDMDistance(distance);\n            if (destAdr !== \"\" && offsetOverride === false) {\n              let duration = distance.duration.value / 60;\n              let offset = Math.ceil(duration / 5) * 5;\n              this.props.onChangeDMOffset(offset);\n            }\n          }\n        }}\n      />\n    );\n  }\n}\n\nexport default DistanceMatrixWrapper;","export class Availability {\n  constructor(onDataLoadCallback) {\n    this.data = null;\n    this.refreshDateTime = null;\n    this.dataError = null;\n    this.dataLoad = false;\n    this.onDataLoadCallback = onDataLoadCallback;\n\n    this.fetchAvailabilityData();\n  }\n\n  fetchAvailabilityData = () => {\n    const url = 'http://smartalex.xyz/data/d.json';\n    const method = 'GET';\n    const headers = { 'content-type': 'application/json' };\n\n    fetch(url, { method: method, headers })\n    .then(response => { return response.json() })\n    .then((data) => {\n      this.data = data.items[0].carpark_data;\n      this.refreshDateTime = data.items[0].timestamp;\n      this.dataLoad = true;\n      this.onDataLoadCallback({ timestamp: this.refreshDateTime, data: this.data });\n    }).catch((error) => {\n      this.dataError = error;\n      this.dataLoad = true;\n    });\n  }\n}\n","import \"./App.css\";\nimport PlacesAutocomplete from \"./components/PlacesAutocomplete\";\nimport CarparkSection from \"./components/CarparkSection\";\nimport DistanceMatrixWrapper from \"./components/DistanceMatrixWrapper\";\nimport React from \"react\";\nimport Carparks from \"./data.json\";\nimport { Button } from \"react-bootstrap\";\nimport { Availability } from \"./lib/Availability\";\n\nclass App extends React.Component {\n  state = {\n    position: null,\n    distance: null,\n    address: \"\",\n    lat: 1.2851377,\n    lng: 103.8306871,\n    period: 0.5,\n    offset: 0,\n    offsetOverride: false,\n    calculateDistance: false,\n    buttons: [\n      'btn-warning',\n      'btn-secondary',\n      'btn-secondary',\n      'btn-secondary',\n      'btn-secondary'\n    ],\n    shortlists: [],\n    availability: {}\n  };\n\n  componentDidMount = () => {\n    new Availability(this.onDataLoadCallback);\n    navigator.geolocation.getCurrentPosition((position) => {\n      this.setState({ position: position });\n    });\n  }\n\n  getDistanceFromLatLngInKm = (lat1, lng1, lat2, lng2) => {\n    const deg2rad = (deg) => {\n      return deg * (Math.PI / 180);\n    }\n    const R = 6371; // Radius of the earth in km\n    const dLat = deg2rad(lat2 - lat1);\n    const dLng = deg2rad(lng2 - lng1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n      Math.sin(dLng / 2) * Math.sin(dLng / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const d = R * c; // Distance in km\n    return d;\n  }\n\n  getShortlistedCarparks = (lat, lng, maxDistance) => {\n    const shortlists = [];\n    const walkingSpeed = 5; // 5 km per hour\n    const sorter = (a, b) => {\n      return a.distance - b.distance;\n    }\n    const sortByDistance = arr => {\n      arr.sort(sorter);\n    }\n    Carparks.map((carpark) => {\n      const distance = this.getDistanceFromLatLngInKm(lat, lng, carpark.lat, carpark.lng);\n      const walkingminutes = Math.ceil(distance / walkingSpeed * 60);\n      if (distance < maxDistance) {\n        shortlists.push({ carpark, distance, walkingminutes });\n      }\n      return true;\n    });\n    sortByDistance(shortlists);\n    shortlists.forEach(shortlist => {\n      const carparkNo = shortlist.carpark.car_park_no;\n      this.state.availability.data.forEach(availability => {\n        const availabilityCarparkNo = availability.carpark_number;\n        if(carparkNo === availabilityCarparkNo) {\n          shortlist.carpark.carparkAvailability = availability.carpark_info;\n        }\n      })\n    })\n    return shortlists;\n  }\n\n  onSelectDestination = (destinationData) => {\n    const maxDistance = 1;\n    const { lat, lng } = destinationData;\n    const shortlists = this.getShortlistedCarparks(lat, lng, maxDistance);\n    this.setState(destinationData);\n    this.setState({ shortlists: shortlists, offsetOverride: false, calculateDistance: true });\n  }\n\n  onClickPeriod = (index, period) => {\n    let buttons = this.state.buttons;\n    for (let i = 0; i < buttons.length; ++i) {\n      if (i === index) {\n        buttons[i] = 'btn-warning';\n      } else {\n        buttons[i] = 'btn-secondary';\n      }\n    }\n    this.setState({ period: period });\n    this.setState({ buttons: buttons });\n  }\n\n  onClickPeriod1 = () => {\n    this.onClickPeriod(0, 0.5);\n  }\n\n  onClickPeriod2 = () => {\n    this.onClickPeriod(1, 1);\n  }\n\n  onClickPeriod3 = () => {\n    this.onClickPeriod(2, 2);\n  }\n\n  onClickPeriod4 = () => {\n    this.onClickPeriod(3, 3);\n  }\n\n  onClickPeriod5 = () => {\n    this.onClickPeriod(4, 6);\n  }\n\n  onChangeOffset = (event) => {\n    this.setState({ offset: event.target.value, offsetOverride: true });\n  }\n\n  onChangeDMDistance = (distance) => {\n    this.setState({ distance: distance });\n  }\n\n  onChangeDMOffset = (offset) => {\n    this.setState({ offset: offset, calculateDistance: false });\n  }\n\n  onDataLoadCallback = (availability) => {\n    this.setState({ availability: availability });\n  }\n\n  render() {\n    return (\n      <main>\n        <div className=\"container-fluid bg-secondary pt-5 pb-3\">\n          <div className=\"container\">\n            <div className=\"text-start text-md-center text-light pt-3 pb-3\">\n              <h1><span className=\"fw-bold fs-1\">Nearest</span> parking</h1>\n            </div>\n            <PlacesAutocomplete\n              inputs={this.state}\n              onSelectDestination={this.onSelectDestination} />\n          </div>\n        </div>\n        <div className=\"container-fluid\">\n          <div className=\"container pt-3 pb-2\">\n            <div className=\"input-group pt-1 pb-2\">\n              <Button className={\"btn fs-5 \" + this.state.buttons[0]} onClick={this.onClickPeriod1}>30min</Button>\n              <Button className={\"btn fs-5 \" + this.state.buttons[1]} onClick={this.onClickPeriod2}>1hr</Button>\n              <Button className={\"btn fs-5 \" + this.state.buttons[2]} onClick={this.onClickPeriod3}>2hr</Button>\n              <Button className={\"btn fs-5 \" + this.state.buttons[3]} onClick={this.onClickPeriod4}>3hr</Button>\n              <Button className={\"btn fs-5 \" + this.state.buttons[4]} onClick={this.onClickPeriod5}>6hr</Button>\n            </div>\n            <div className=\"col-xs-2\">\n              <select className=\"form-select fs-5 bg-warning\" style={{ width: 200 }} value={this.state.offset} onChange={this.onChangeOffset}>\n                <option value=\"0\">arrive now</option>\n                <option value=\"5\">arrive in +5min</option>\n                <option value=\"10\">arrive in +10min</option>\n                <option value=\"15\">arrive in +15min</option>\n                <option value=\"20\">arrive in +20min</option>\n                <option value=\"25\">arrive in +25min</option>\n                <option value=\"30\">arrive in +30min</option>\n                <option value=\"35\">arrive in +35min</option>\n                <option value=\"40\">arrive in +40min</option>\n                <option value=\"45\">arrive in +45min</option>\n              </select>\n            </div>\n          </div>\n          <DistanceMatrixWrapper\n            inputs={this.state}\n            onChangeDMDistance={this.onChangeDMDistance}\n            onChangeDMOffset={this.onChangeDMOffset} />\n          <CarparkSection\n            position={this.state.position}\n            offset={this.state.offset}\n            period={this.state.period}\n            shortlists={this.state.shortlists} />\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}